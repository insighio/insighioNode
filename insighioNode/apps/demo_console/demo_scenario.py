# setup init

import utime
import machine
import device_info
from . import demo_utils
import gc
import logging
from external.kpn_senml.senml_unit import SenmlUnits
from external.kpn_senml.senml_unit import SenmlSecondaryUnits

# The demo_config.py is autogenerated by webui
# it is the concatenation of the template configurations in template folder.
from . import demo_config as cfg

demo_utils.device_init()

# Operations for compatibility with older configurations
# default temperature unit: Celsius
if not hasattr(cfg, '_MEAS_TEMP_UNIT_IS_CELSIUS'):
    cfg._MEAS_TEMP_UNIT_IS_CELSIUS = True

start_time = utime.ticks_ms()

# initializations
device_info.set_defaults(heartbeat=False, wifi_on_boot=False, wdt_on_boot=True, wdt_on_boot_timeout_sec=cfg._WD_PERIOD, bt_on_boot=False)
device_info.set_led_color('blue')
_DEVICE_ID = device_info.get_device_id()[0]
cfg.device_id = _DEVICE_ID
logging.info("Device ID in readable form: {}".format(_DEVICE_ID))

# wachdog reset
demo_utils.watchdog_reset()

# get measurements
measurements = demo_utils.get_measurements(cfg)

# connect to network
if cfg.network == "lora":
    from . import lora as network
elif cfg.network == "nbiot":
    from . import nbiot as network
elif cfg.network == "wifi":
    from . import wifi as network

message = network.create_message(cfg.device_id, measurements)

try:
    device_info.set_led_color('red')
    logging.info("Connecting to network over: " + cfg.network)
    connection_results = network.connect(cfg)
    measurements.update(connection_results)

    if ("status" in measurements) and (measurements["status"]["value"] is True):
        logging.info("Network [" + cfg.network + "] connected")
        # value no longer needed
        del measurements["status"]
        device_info.set_led_color('green')

        # create packet
        measurements["uptime"] = {"unit": SenmlSecondaryUnits.SENML_SEC_UNIT_MILLISECOND, "value": utime.ticks_ms() - start_time}
        message = network.create_message(cfg.device_id, measurements)

        # send packet
        network.send_message(cfg, message)

        # transport finished
        utime.sleep_ms(1000)

        if cfg._CHECK_FOR_OTA:
            from . import ota
            ota.checkAndApply(cfg)
    else:
        logging.info("Network [" + cfg.network + "] not connected")

    # disconnect
    network.disconnect()
except Exception as e:
    logging.exception(e, "Main Exception:")

# deinit
device_info.set_led_color('white')

demo_utils.device_deinit()

# Finalization Actions
gc.collect()
logging.info("Getting into deep sleep...")
# machine.deepsleep(cfg._DEEP_SLEEP_PERIOD_SEC*1000 - (utime.ticks_ms() - start_time))
machine.deepsleep(cfg._DEEP_SLEEP_PERIOD_SEC * 1000)
